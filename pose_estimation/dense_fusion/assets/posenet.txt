PoseNet with 13 objects and 500 points --> 

PoseNet(
  (cnn): ModifiedResnet(
    (model): DataParallel(
      (module): PSPNet(
        (feats): ResNet(
          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
          (relu): ReLU(inplace)
          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
          (layer1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
            (1): BasicBlock(
              (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (layer2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (downsample): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            )
          )
          (layer3): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (downsample): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            )
          )
          (layer4): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (downsample): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
              (relu): ReLU(inplace)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
            )
          )
        )
        (psp): PSPModule(
          (stages): ModuleList(
            (0): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (1): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(2, 2))
              (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (2): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(3, 3))
              (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (3): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(6, 6))
              (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (bottleneck): Conv2d(2560, 1024, kernel_size=(1, 1), stride=(1, 1))
          (relu): ReLU()
        )
        (drop_1): Dropout2d(p=0.3)
        (up_1): PSPUpsample(
          (conv): Sequential(
            (0): Upsample(scale_factor=2, mode=bilinear)
            (1): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): PReLU(num_parameters=1)
          )
        )
        (up_2): PSPUpsample(
          (conv): Sequential(
            (0): Upsample(scale_factor=2, mode=bilinear)
            (1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): PReLU(num_parameters=1)
          )
        )
        (up_3): PSPUpsample(
          (conv): Sequential(
            (0): Upsample(scale_factor=2, mode=bilinear)
            (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (2): PReLU(num_parameters=1)
          )
        )
        (drop_2): Dropout2d(p=0.15)
        (final): Sequential(
          (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): LogSoftmax()
        )
        (classifier): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU()
          (2): Linear(in_features=256, out_features=21, bias=True)
        )
      )
    )
  )
  (feat): PoseNetFeat(
    (conv1): Conv1d(3, 64, kernel_size=(1,), stride=(1,))
    (conv2): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
    (e_conv1): Conv1d(32, 64, kernel_size=(1,), stride=(1,))
    (e_conv2): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
    (conv5): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    (conv6): Conv1d(512, 1024, kernel_size=(1,), stride=(1,))
    (ap1): AvgPool1d(kernel_size=(500,), stride=(500,), padding=(0,))
  )
  (conv1_r): Conv1d(1408, 640, kernel_size=(1,), stride=(1,))
  (conv1_t): Conv1d(1408, 640, kernel_size=(1,), stride=(1,))
  (conv1_c): Conv1d(1408, 640, kernel_size=(1,), stride=(1,))
  (conv2_r): Conv1d(640, 256, kernel_size=(1,), stride=(1,))
  (conv2_t): Conv1d(640, 256, kernel_size=(1,), stride=(1,))
  (conv2_c): Conv1d(640, 256, kernel_size=(1,), stride=(1,))
  (conv3_r): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
  (conv3_t): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
  (conv3_c): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
  (conv4_r): Conv1d(128, 52, kernel_size=(1,), stride=(1,))
  (conv4_t): Conv1d(128, 39, kernel_size=(1,), stride=(1,))
  (conv4_c): Conv1d(128, 13, kernel_size=(1,), stride=(1,))
)